# Generated by Django 2.2.4 on 2019-08-31 00:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Drug',
            fields=[
                ('drug_id', models.AutoField(primary_key=True, serialize=False)),
                ('drug_name', models.CharField(max_length=256)),
                ('black_box_warning', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'drug',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugClass',
            fields=[
                ('drug_class_id', models.AutoField(primary_key=True, serialize=False)),
                ('drug_class_name', models.CharField(max_length=50)),
                ('drug_class_description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'drug_class',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugInformation',
            fields=[
                ('drug_info_id', models.AutoField(primary_key=True, serialize=False)),
                ('information', models.CharField(max_length=1024)),
                ('scrabble_hint', models.CharField(max_length=1024)),
                ('keyword_bk', models.CharField(max_length=1024)),
            ],
            options={
                'db_table': 'drug_information',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugInformationKeyword',
            fields=[
                ('relation_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'drug_info_keyword',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugInformationType',
            fields=[
                ('drug_info_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('drug_information_type', models.CharField(max_length=50)),
                ('game_level', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'drug_information_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugKeyword',
            fields=[
                ('keyword_id', models.AutoField(primary_key=True, serialize=False)),
                ('keyword', models.CharField(max_length=256)),
            ],
            options={
                'db_table': 'drug_keyword',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugQuizOption',
            fields=[
                ('quiz_option_id', models.AutoField(primary_key=True, serialize=False)),
                ('quiz_option', models.CharField(max_length=200)),
                ('correct_flag', models.BooleanField()),
            ],
            options={
                'db_table': 'drug_quiz_option',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugQuizQuestion',
            fields=[
                ('drug_quiz_id', models.AutoField(primary_key=True, serialize=False)),
                ('quiz_question', models.CharField(max_length=500)),
                ('quiz_type', models.CharField(max_length=500)),
                ('enable', models.BooleanField()),
            ],
            options={
                'db_table': 'drug_quiz_question',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugSubClass',
            fields=[
                ('drug_subclass_id', models.AutoField(primary_key=True, serialize=False)),
                ('drug_subclass_name', models.CharField(max_length=50)),
                ('drug_subclass_description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'drug_subclass',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Is the user allowed to have access to the admin', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Is the user account currently active', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('profile_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_of_birth', models.DateField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
    ]
